// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"
import model "github.com/svenjeppsson/travis-test/model"

// DataAccessLayer is an autogenerated mock type for the DataAccessLayer type
type DataAccessLayer struct {
	mock.Mock
}

// DelelePerson provides a mock function with given fields: id
func (_m *DataAccessLayer) DelelePerson(id int64) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(int64) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAllPersons provides a mock function with given fields:
func (_m *DataAccessLayer) GetAllPersons() (error, []model.Person) {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	var r1 []model.Person
	if rf, ok := ret.Get(1).(func() []model.Person); ok {
		r1 = rf()
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).([]model.Person)
		}
	}

	return r0, r1
}

// GetPerson provides a mock function with given fields: id
func (_m *DataAccessLayer) GetPerson(id int64) (error, *model.Person) {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(int64) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	var r1 *model.Person
	if rf, ok := ret.Get(1).(func(int64) *model.Person); ok {
		r1 = rf(id)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*model.Person)
		}
	}

	return r0, r1
}

// GetPersonsBySearchString provides a mock function with given fields: search
func (_m *DataAccessLayer) GetPersonsBySearchString(search string) (error, []model.Person) {
	ret := _m.Called(search)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(search)
	} else {
		r0 = ret.Error(0)
	}

	var r1 []model.Person
	if rf, ok := ret.Get(1).(func(string) []model.Person); ok {
		r1 = rf(search)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).([]model.Person)
		}
	}

	return r0, r1
}

// StorePerson provides a mock function with given fields: person
func (_m *DataAccessLayer) StorePerson(person *model.Person) error {
	ret := _m.Called(person)

	var r0 error
	if rf, ok := ret.Get(0).(func(*model.Person) error); ok {
		r0 = rf(person)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
